extends layout

block content
  #container
    header
      h1
        a(href='http://socket.io/', target='_blank').logo Socket.IO
        | 1.0 Example
      .sub-title I wrote these examples for just learning Socket.IO.
    section#simple.example
      span.title Simple Example
      input(type='button', value='connect')#simple-connect.connect
      #simple-content.textbox
      form#simple-form
        input(type='text')#simple-text
        input(type='submit', value='Submit')
      .source
        .source-left
          p.title Server
          pre.prettyprint 
            | var simple = io
            |   .sockets
            |   .on('connection', function(socket) {
            |     socket.on('message', function(data) {
            |       socket.broadcast.send(data);
            |     });
            |     socket.on('disconnect', function() {
            |       // handle disconnect
            |     });
            |   });
        .source-right
          p.title Client
          pre.prettyprint 
            | var socket = io.connect();
            | var content = $('#simple-content');
            | socket.on('connect', function() {
            |   $('#simple-form').css('display', 'block');
            |   content.append($('<p>').text('Connected'));  
            | });
            | 
            | socket.on('message', function(msg) {
            |   content.append($('<p>').text(msg)
            |          .append($('<em>').text(' from server')));
            | });
            |  
            | $('#simple-form').submit(function(e) {
            |   e.preventDefault();
            |   var textObj = $('#simple-text');   
            |   var msg = textObj.val();
            |   textObj.val('');
            |   content.append($('<p>').text(msg)
            |          .append($('<em>').text(' from me')));
            |   socket.send(msg);
            | });
    section#namespace.example
      span.title Namespace Example
      input(type='button', value='connect')#namespace-connect.connect
      #namespace-content.textbox
      form#namespace-form
        input(type='text')#namespace-text
        input(type='submit', value='Submit')
      .source
        .source-left
          p.title Server
          pre.prettyprint 
            | var namespace = io
            |   .of('/namespace')
            |   .on('connection', function(socket) {
            |     socket.on('message', function(data) {
            |       socket.broadcast.send(data);
            |     }); 
            |   });

        .source-right
          p.title Client
          pre.prettyprint 
            | var namespace = io.connect('/namespace');
            | var content = $('#namespace-content');
            | namespace.on('connect', function() {
            |   $('#namespace-form').css('display', 'block');
            |   content.append($('<p>').text('Connected'));
            | }); 
            |    
            | namespace.on('message', function(msg) {
            |   content.append($('<p>').text(msg)
            |          .append($('<em>').text(' from server')));
            | });
            |    
            | $('#namespace-form').submit(function(e) {
            |   var textObj = $('#namespace-text');
            |   var msg = textObj.val();
            |   textObj.val('');
            |   content.append($('<p>').text(msg)
            |          .append($('<em>').text(' from me')));
            |   namespace.send(msg);
            | });
        
    section#custom.example
      span.title Custom Event Example
      input(type='button', value='connect')#custom-connect.connect
      #custom-content.textbox
      form#custom-form
        input(type='text')#custom-text
        input(type='submit', value='Submit')
      .source
        .source-left
          p.title Server
          pre.prettyprint 
            | var custom = io
            |   .of('/custom')
            |   .on('connection', function(socket) {
            |     socket.on('fromclient', function(data) {
            |       socket.broadcast.emit('fromserver', data);
            |     }); 
            |   });
        .source-right
          p.title Client
          pre.prettyprint 
            | var custom = io.connect('/custom');
            | var content = $('#custom-content');
            | custom.on('connect', function() {
            |   $('#custom-form').css('display', 'block');
            |   content.append($('<p>').text('Connected'));
            | });
            | custom.on('fromserver', function(msg) {
            |  content.append($('<p>').text(msg)
            |         .append($('<em>').text(' from server')));
            | });
            | $('#custom-form').submit(function(e) {
            |   var textObj = $('#custom-text');
            |   var msg = textObj.val();
            |   textObj.val('');
            |   content.append($('<p>').text(msg)
            |          .append($('<em>').text(' from me')));
            |   custom.emit('fromclient', msg);
            | });
        
    section#volatile.example
      span.title Volatile Event Example
      input(type='button', value='connect')#volatile-connect.connect
      #volatile-content.textbox
      .source
        .source-left
          p.title Server
          pre.prettyprint 
            | var volatile = io
            |   .of('/volatile')
            |   .on('connection', function(socket) {
            |     socket.on('fromclient', function(data) {
            |       socket.broadcast.emit('fromserver', data);
            |     }); 
            |    
            |     var vola = setInterval(function () {
            |       socket.volatile.emit('current time', 
            |                            'current time : ' + new Date());
            |     }, 1000);
            |  
            |     socket.on('disconnect', function () {
            |       clearInterval(vola);
            |     });
            |   });
        .source-right
          p.title Client
          pre.prettyprint 
            | var volatile = io.connect('/volatile');
            | var content = $('#volatile-content');
            | volatile.on('connect', function() {
            |   content.append($('<p>').text('Connected'));
            | }); 
            | 
            | volatile.on('current time', function(msg) {
            |   content.append($('<p>').text(msg)
            |          .append($('<em>').text(' from server')));
            | });

    section#room.example
      span.title Room Event Example
      input(type='button', value='connect')#room-connect.connect
      #room-content.textbox
      form#room-form
        select#room-select
          option(value='first room') first room
          option(value='second room') second room
          option(value='third room') third room
        input(type='button', value='join')#room-join
        input(type='text')#room-text
        input(type='submit', value='Submit')
      .source
        .source-left
          p.title Server
          pre.prettyprint 
            | var Room = io
            |   .of('/room')
            |   .on('connection', function(socket) {
            |     var joinedRoom = null;
            |     socket.on('join room', function(data) {
            |       socket.join(data);
            |       joinedRoom = data;
            |       socket.emit('joined', "you've joined " + data);
            |       socket.broadcast.to(joinedRoom)
            |                          .send('someone joined room');
            |     }); 
            |     socket.on('fromclient', function(data) {
            |       if (joinedRoom) {
            |         socket.broadcast.to(joinedRoom).send(data);
            |       } else {
            |         socket.send(
            |            "you're not joined a room." +
            |            "select a room and then push join."
            |         );
            |       }
            |     });
            |   });
        .source-right
          p.title Client
          pre.prettyprint 
            | var joined = false;
            | var room = io.connect('/room');
            | var content = $('#room-content');
            | room.on('connect', function() {
            |   $('#room-form').css('display', 'block');
            |   content.append($('<p>').text('Connected'));
            | }); 
            | 
            | room.on('joined', function(msg) {
            |   content.append($('<p>').text(msg)
            |          .append($('<em>').text(' from server')));
            | });
            | 
            | room.on('message', function(msg) {
            |   content.append($('<p>').text(msg)
            |          .append($('<em>').text(' from server')));
            | });
            | 
            | $('#room-join').click(function(e) {
            |   joined = true;
            |   room.emit('join room', $('#room-select').val());
            | });
            | 
            | $('#room-form').submit(function(e) {
            |   var textObj = $('#room-text');
            |   var msg = textObj.val();
            |   textObj.val('');
            |   content.append($('<p>').text(msg)
            |          .append($('<em>').text(' from me')));
            |   room.emit('fromclient', msg);
            | });

    section#json.example
      span.title JSON parse Example
      input(type='button', value='connect')#json-connect.connect
      #json-content.textbox
      form#json-form
        input(type='text')#json-text
        input(type='submit', value='Submit')
      .source
        .source-left
          p.title Server
          pre.prettyprint 
            | var json = io
            |   .of('/json')
            |   .on('connection', function(socket) {
            |     socket.on('message', function(data) {
            |       socket.json.broadcast.send({text:data});
            |     });
            |     socket.on('disconnect', function() {
            |       // handle disconnect
            |     });
            |   });
        .source-right
          p.title Client
          pre.prettyprint
            | var content = $('#json-content');
            | socket.on('connect', function() {
            |   $('#json-form').css('display', 'block');
            |   content.append($('<p>').text('Connected'));
            | });
            | socket.on('message', function(msg) {
            |   content.append($('<p>').text(msg.text)
            |          .append($('<em>').text(' from server')));
            | });
            | $('#json-form').submit(function(e) {
            |   var textObj = $('#json-text');   
            |   var msg = textObj.val();
            |   textObj.val('');
            |   content.append($('<p>').text(msg)
            |          .append($('<em>').text(' from me')));
            |   socket.send(msg);
            | }); 
          
    footer
      | Written by 
      a(href='http://blog.outsider.ne.kr', target='_blank') Outsider
      |  at 
      a(href='http://sideeffect.kr', target='_blank') Side Effect Studio
       
  a(href='https://github.com/outsideris/socket.io-examples', target='_blank')
    img(style='position: absolute; top: 0; right: 0; border: 0;', src='https://s3.amazonaws.com/github/ribbons/forkme_right_white_ffffff.png', alt='Fork me on GitHub')
            
  script(src='http://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js')
  script(src='/socket.io/socket.io.js')
  script(src='/javascripts/prettify.js')
  script.
    $(document).ready(function(){
       $('form').css('display', 'none');
       prettyPrint();
       
      //Simple Example
      $('#simple-connect').click(function() {
        $(this).unbind('click');
        var socket = io.connect();
        var content = $('#simple-content');
        socket.on('connect', function() {
          $('#simple-form').css('display', 'block');
          content.append($('<p>').text('Connected'));  
        });
        
        socket.on('message', function(msg) {
          content.append($('<p>').text(msg).append($('<em>').text(' from server')));
          content.scrollTop(content.height());
        });
        
        $('#simple-form').submit(function(e) {
          e.preventDefault();
          var textObj = $('#simple-text');   
          var msg = textObj.val();
          if (msg !== '') {
            textObj.val('');
            content.append($('<p>').text(msg).append($('<em>').text(' from me')));
            content.scrollTop(content.height());
            socket.send(msg);
          }
        });
      });
      
      // Namespace Example
      $('#namespace-connect').click(function() {
        $(this).unbind('click');
        var namespace = io.connect('/namespace');
        var content = $('#namespace-content');
        namespace.on('connect', function() {
          $('#namespace-form').css('display', 'block');
          content.append($('<p>').text('Connected'));
        }); 
        
        namespace.on('message', function(msg) {
          content.append($('<p>').text(msg).append($('<em>').text(' from server')));
          content.scrollTop(content.height());
        });
        
        $('#namespace-form').submit(function(e) {
          e.preventDefault();
          var textObj = $('#namespace-text');
          var msg = textObj.val();
          if (msg !== '') {
            textObj.val('');
            content.append($('<p>').text(msg).append($('<em>').text(' from me')));
            content.scrollTop(content.height());
            namespace.send(msg);
          }
        });
      });
      
      // Custom Event Example
      $('#custom-connect').click(function() {
        $(this).unbind('click');
        var custom = io.connect('/custom');
        var content = $('#custom-content');
        custom.on('connect', function() {
          $('#custom-form').css('display', 'block');
          content.append($('<p>').text('Connected'));
        }); 
        
        custom.on('fromserver', function(msg) {
          content.append($('<p>').text(msg).append($('<em>').text(' from server')));
          content.scrollTop(content.height());
        });
        
        $('#custom-form').submit(function(e) {
          e.preventDefault();
          var textObj = $('#custom-text');
          var msg = textObj.val();
          if (msg !== '') {
            textObj.val('');
            content.append($('<p>').text(msg).append($('<em>').text(' from me')));
            content.scrollTop(content.height());
            custom.emit('fromclient', msg);
          }
        });
      });
      
      // Volatile Event Example
      $('#volatile-connect').click(function() {
        $(this).unbind('click');
        var volatile = io.connect('/volatile');
        var content = $('#volatile-content');
        volatile.on('connect', function() {
          content.append($('<p>').text('Connected'));
        }); 

        volatile.on('current time', function(msg) {
          
          content.append($('<p>').text(msg).append($('<em>').text(' from server')));
          content.scrollTop(content.height());
        });
      });
      
      // Room Event Example
      $('#room-connect').click(function() {
        $(this).unbind('click');
        var joined = false;
        var room = io.connect('/room');
        var content = $('#room-content');
        room.on('connect', function() {
          $('#room-form').css('display', 'block');
          content.append($('<p>').text('Connected'));
        }); 
        
        room.on('joined', function(msg) {
          content.append($('<p>').text(msg).append($('<em>').text(' from server')));
          content.scrollTop(content.height());
        });
        
        room.on('message', function(msg) {
          content.append($('<p>').text(msg).append($('<em>').text(' from server')));
          content.scrollTop(content.height());
        });
        
        $('#room-join').click(function(e) {
          joined = true;
          room.emit('join room', $('#room-select').val());
        });
        
        $('#room-form').submit(function(e) {
          e.preventDefault();
          var textObj = $('#room-text');
          var msg = textObj.val();
          if (msg !== '') {
            textObj.val('');
            content.append($('<p>').text(msg).append($('<em>').text(' from me')));
            content.scrollTop(content.height());
            room.emit('fromclient', msg);
          }
        });
      }); 
      
      //JSON Parse Example
      $('#json-connect').click(function() {
        $(this).unbind('click');
        var socket = io.connect('/json');
        var content = $('#json-content');
        socket.on('connect', function() {
          $('#json-form').css('display', 'block');
          content.append($('<p>').text('Connected'));  
        });
        
        socket.on('message', function(msg) {
          content.append($('<p>').text(msg.text).append($('<em>').text(' from server')));
          content.scrollTop(content.height());
        });
        
        $('#json-form').submit(function(e) {
          e.preventDefault();
          var textObj = $('#json-text');   
          var msg = textObj.val();
          if (msg !== '') {
            textObj.val('');
            content.append($('<p>').text(msg).append($('<em>').text(' from me')));
            content.scrollTop(content.height());
            socket.send(msg);
          }
        });
      });

    });
